#include <samd20.h>
#include "SEGGER_RTT.h"

#define I2C_SLAVE_ADDRESS 0x10 // I2C Slave Address

volatile uint8_t i2c_received_data[16];
volatile uint8_t i2c_index = 0;

void configure_clocks(void) {
    // Enable the APBC clock for SERCOM3
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;

    // Configure GCLK for SERCOM3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_GEN(0) |  // Use GCLK0
                        GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.bit.SYNCBUSY);
}

void configure_pins(void) {
    // Configure PA16 (SDA) and PA17 (SCL) for SERCOM3
    PORT->Group[0].PINCFG[16].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN;
    PORT->Group[0].PINCFG[17].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN;

    PORT->Group[0].PMUX[16 >> 1].reg |= PORT_PMUX_PMUXE(0x2); // Function C for SDA
    PORT->Group[0].PMUX[17 >> 1].reg |= PORT_PMUX_PMUXO(0x2); // Function C for SCL
}

void configure_i2c_slave(void) {
    // Reset SERCOM3
    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_SWRST;
    while (SERCOM3->I2CS.CTRLA.bit.SWRST);

    // Configure SERCOM3 as I2C Slave
    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE |
                               SERCOM_I2CS_CTRLA_SCLSM;

    // Set slave address
    SERCOM3->I2CS.ADDR.reg = SERCOM_I2CS_ADDR_ADDR(I2C_SLAVE_ADDRESS);

    // Enable the SERCOM3 I2C Slave
    SERCOM3->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;

    // Enable Data Ready interrupt
    SERCOM3->I2CS.INTENSET.reg = SERCOM_I2CS_INTENSET_DRDY;

    // Enable SERCOM3 interrupt in NVIC
    NVIC_ClearPendingIRQ(SERCOM3_IRQn);
    NVIC_SetPriority(SERCOM3_IRQn, 3);
    NVIC_EnableIRQ(SERCOM3_IRQn);

    SEGGER_RTT_WriteString(0, "I2C Slave configured on SERCOM3\n");
}

void SERCOM3_Handler(void) {
    if (SERCOM3->I2CS.INTFLAG.bit.DRDY) {
        // Read the received data
        uint8_t received_byte = SERCOM3->I2CS.DATA.reg;

        // Store it in the buffer
        i2c_received_data[i2c_index++] = received_byte;
        if (i2c_index >= sizeof(i2c_received_data)) {
            i2c_index = 0; // Wrap around if the buffer is full
        }

        // Output the received data to RTT Viewer
        SEGGER_RTT_printf(0, "Received: 0x%02X\n", received_byte);
    }
}

int main(void) {
    // Initialize the system
    SystemInit();

    // Initialize RTT
    SEGGER_RTT_Init();
    SEGGER_RTT_WriteString(0, "I2C Slave Initialized\n");

    // Configure clocks, pins, and I2C Slave
    configure_clocks();
    configure_pins();
    configure_i2c_slave();

    // Main loop
    while (1) {
        __WFI(); // Wait for interrupt
    }
}
