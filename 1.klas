int I2C::slave_read_packet_wait(uint8_t *buf, uint8_t len_buf, uint8_t &len_in)
{  
  	if(isMaster())setSlave(slaveAddr);
  	int status=i2c_slave_wait_for_bus();
	if(status!=0)return status;
	
	if (!(sercom->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH)) {
		/* Not address interrupt, something is wrong */
		return -1;
	}

	/* Check if there was an error in the last transfer */
	if (sercom->I2CS.STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
			SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
		return -2;
	}	
	
	if ((sercom->I2CS.STATUS.reg & SERCOM_I2CS_STATUS_DIR)) {
		// Write request from master, send NACK and return
		i2c_slave_set_ctrlb_ackact(false);
		i2c_slave_set_ctrlb_cmd3();
		return -1;
	}	
	i2c_slave_set_ctrlb_ackact(true);
	i2c_slave_set_ctrlb_cmd3();
		
	len_in = 0;
	uint16_t length = len_buf;
	while (length--) {
	  	status=i2c_slave_wait_for_bus();
		if (status != 0) {
			// Timeout, return
			return status;
		}		
		if ((sercom->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) ||
				sercom->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
			// Master sent stop condition, or repeated start, read done 
			// Clear stop flag 
			sercom->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
			return 0;
		}		
		
		// Read data 
		while (sercom->I2CS.STATUS.bit.SYNCBUSY){}
		buf[len_in++] = sercom->I2CS.DATA.reg;
	}
	i2c_slave_wait_for_bus();
	if (sercom->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
		// Buffer is full, send NACK 
		i2c_slave_set_ctrlb_ackact(false);
		sercom->I2CS.CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
	}
	if (sercom->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
		/* Clear stop flag */
		sercom->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
	}
	return 0;
}
