void init_uart(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5; // Включение тактирования для SERCOM5

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0); // Генератор 0

    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;

    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2); // PA20 (PAD[2]), PA21 (PAD[3])

    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_DORD |
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) |
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;
    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 19200)) - 1; // Установка скорости 19200 бод при 1 МГц
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
}

// Инициализация I2C (SERCOM3, PA22, PA23) в режиме Slave с адресом 16
void init_i2c(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3; // Включение тактирования для SERCOM3

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0); // Генератор 0

    PORT->Group[0].PINCFG[22].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[23].reg = PORT_PINCFG_PMUXEN;

    PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2); // PA22 (SDA), PA23 (SCL)

    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE |
                               SERCOM_I2CS_CTRLA_SDAHOLD(3) |
                               SERCOM_I2CS_CTRLA_ENABLE;

    SERCOM3->I2CS.ADDR.reg = (16 << 1) | SERCOM_I2CS_ADDR_ADDRMASK(0x00); // Установка адреса 16
}

// Функция отправки данных через UART
void uart_send(uint8_t data) {
    while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    SERCOM5->USART.DATA.reg = data;
}

// Функция чтения данных по I2C в режиме Slave
uint8_t i2c_read(void) {
    while (!(SERCOM3->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY));
    return SERCOM3->I2CS.DATA.reg;
}

int main(void) {
    SystemInit();
    init_uart();
    init_i2c();

    while (1) {
        uint8_t data = i2c_read(); // Чтение данных по I2C
        uart_send(data);          // Отправка данных через UART
    }
}
