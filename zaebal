#include <sam.h>

// Настройки UART
#define BAUD_RATE       19200
#define UART_SERCOM     SERCOM5
#define UART_TX_PIN     PIN_PA20
#define UART_RX_PIN     PIN_PA21
#define UART_TX_PAD     2  // TX на PAD2
#define UART_RX_PAD     3  // RX на PAD3
#define GCLK_SERCOM5_CORE 0x15  // Идентификатор GCLK для SERCOM5
#define UART_CLK_FREQ   1000000  // Частота процессора

void configure_uart(void) {
    // Включение тактирования для SERCOM5
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;

    // Настройка генератора GCLK для SERCOM5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(GCLK_SERCOM5_CORE) |
                        GCLK_CLKCTRL_GEN(0) |  // Генератор 0 (основной)
                        GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.bit.SYNCBUSY) {
        // Ожидание завершения синхронизации
    }

    // Сброс SERCOM5
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    while (SERCOM5->USART.CTRLA.bit.SWRST) {
        // Ожидание завершения сброса
    }

    // Настройка режима работы SERCOM5 в режиме USART
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(UART_RX_PAD) |
                               SERCOM_USART_CTRLA_TXPO(UART_TX_PAD) |
                               SERCOM_USART_CTRLA_DORD;

    // Настройка скорости передачи
    uint64_t baud = (uint64_t)(65536 * (UART_CLK_FREQ - 16 * BAUD_RATE)) / UART_CLK_FREQ;
    SERCOM5->USART.BAUD.reg = (uint16_t)baud;

    // Включение приемника и передатчика
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;

    // Включение модуля USART
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;

    // Настройка мультиплексирования пинов
    PORT->Group[0].PMUX[UART_TX_PIN / 2].reg |= PORT_PMUX_PMUXE_D;
    PORT->Group[0].PMUX[UART_RX_PIN / 2].reg |= PORT_PMUX_PMUXO_D;
    PORT->Group[0].PINCFG[UART_TX_PIN].reg |= PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[UART_RX_PIN].reg |= PORT_PINCFG_PMUXEN;
}

void uart_write(uint8_t data) {
    while (!(SERCOM5->USART.INTFLAG.bit.DRE)) {
        // Ожидание готовности передатчика
    }
    SERCOM5->USART.DATA.reg = data;
}

uint8_t uart_read(void) {
    while (!(SERCOM5->USART.INTFLAG.bit.RXC)) {
        // Ожидание получения данных
    }
    return SERCOM5->USART.DATA.reg;
}

int main(void) {
    // Инициализация системы
    SystemInit();
    configure_uart();

    uint8_t received_byte;

    while (1) {
        // Получение байта и отправка его обратно
        received_byte = uart_read();
        uart_write(received_byte);
    }
}
