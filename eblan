#include "driver_init.h"
#include "SEGGER_RTT.h"
#include "i2c.h"
#include "sam.h"

// Буфер для данных
uint8_t global_buffer[BUF_SIZE];
volatile int buffer_length = 0;

// Флаг для переключения
volatile bool switch_to_uart = false;

I2C i2c_A(SERCOM5, PINMUX_PA22D_SERCOM5_PAD0, PINMUX_PA23D_SERCOM5_PAD1, true);

void SERCOM5_Handler(void) // Обработка прерываний I2C
{
     if (SERCOM5->I2CS.INTFLAG.bit.PREC) {
        SERCOM5->I2CS.CTRLB.bit.ACKACT = 0;
        SERCOM5->I2CS.CTRLB.bit.CMD = 0x3;
    } else if (SERCOM5->I2CS.INTFLAG.bit.AMATCH) {
        SERCOM5->I2CS.INTFLAG.bit.AMATCH = 1;
        buffer_length = 0;
    } else if (SERCOM5->I2CS.INTFLAG.bit.DRDY) {
        if (SERCOM5->I2CS.STATUS.bit.DIR == 0) {
            global_buffer[buffer_length++] = SERCOM5->I2CS.DATA.reg;
            SERCOM5->I2CS.CTRLB.bit.CMD = 0x3;
            SERCOM5->I2CS.CTRLB.bit.ACKACT = 0;
        }
}

void init_uart(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2);

    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_DORD |
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) |
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN |
                               SERCOM_USART_CTRLB_TXEN;

    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 19200)) - 1;
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
}

void deinit_uart(void) {
    SERCOM5->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
}

void init_i2c_slave(void) {
    i2c_A.setSlave(0x9);
}

void deinit_i2c_slave(void) {
    SERCOM5->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
}

void send_uart_data(void) {
    for (int i = 0; i < buffer_length; i++) {
        while (!(SERCOM5->USART.INTFLAG.bit.DRE)) {}
        SERCOM5->USART.DATA.reg = global_buffer[i];
    }
    buffer_length = 0; // Очистка буфера
}

int main(void) {
    SystemInit();
    SEGGER_RTT_printf(0, "System Initialized\n");

    init_i2c_slave();

    while (1) {
        if (switch_to_uart) {
            deinit_i2c_slave();
            init_uart();
            send_uart_data();
            deinit_uart();
            init_i2c_slave();
            switch_to_uart = false;
        }
    }
}
