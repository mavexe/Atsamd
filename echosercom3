void init_uart(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5; // Включаем тактирование для SERCOM5

    // Настраиваем генератор тактовой частоты для SERCOM5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    // Настройка пинов PA20 и PA21 для UART
    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2); // SERCOM5 на PA20 (TX) и PA21 (RX)

    // Конфигурация UART на SERCOM5
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_DORD |
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) | // RX на PAD[3] (PA21)
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);  // TX на PAD[2] (PA20)
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN; // Включаем RX и TX

    // Устанавливаем скорость UART (19200 бод при 1 МГц)
    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 19200)) - 1;

    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE; // Включаем модуль UART
}

// Инициализация I2C Slave на SERCOM3 (PA22 - SDA, PA23 - SCL)
void init_i2c_slave(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3; // Включаем тактирование для SERCOM3

    // Настройка генератора тактовой частоты для SERCOM3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    // Настройка пинов PA22 и PA23 для I2C
    PORT->Group[0].PINCFG[22].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[23].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXE(3) | PORT_PMUX_PMUXO(3); // SERCOM3 на PA22 (SDA) и PA23 (SCL)

    // Конфигурация SERCOM3 как I2C Slave
    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE | // Режим I2C Slave
                               SERCOM_I2CS_CTRLA_ENABLE;         // Включаем модуль

    // Устанавливаем адрес I2C Slave (16 в десятичной системе)
    SERCOM3->I2CS.ADDR.reg = (16 << 1); // Установка адреса Slave
}

// Проверка данных на I2C Slave и передача их на UART
void test_i2c_slave(void) {
    while (1) {
        // Проверяем, есть ли данные от I2C Master
        if (SERCOM3->I2CS.INTFLAG.bit.DRDY) {
            uint8_t data = SERCOM3->I2CS.DATA.reg; // Чтение данных от Master

            // Передача данных на UART для проверки
            while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
            SERCOM5->USART.DATA.reg = data;
        }
    }
}

int main(void) {
    SystemInit(); // Инициализация системы

    init_uart();     // Инициализация UART
    init_i2c_slave(); // Инициализация I2C Slave

    test_i2c_slave(); // Проверка данных на I2C

    while (1) {
        // Резервный цикл
    }
}
