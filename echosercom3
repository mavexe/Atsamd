void init_uart(void) {
    // Включение тактирования для SERCOM5 (UART)
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;

    // Настройка генератора для SERCOM5 на 1 МГц
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    // Настройка пинов PA20 и PA21 для UART
    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2);

    // Конфигурация SERCOM5 как UART
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_DORD |
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) |
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;

    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 19200)) - 1;

    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
}

void init_i2c_slave(void) {
    // Включение тактирования для SERCOM3 (I2C)
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;

    // Настройка генератора для SERCOM3 на 1 МГц
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    // Настройка пинов PA22 и PA23 для I2C
    PORT->Group[0].PINCFG[22].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[23].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2);

    // Конфигурация SERCOM3 как I2C Slave
    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE |
                               SERCOM_I2CS_CTRLA_ENABLE;

    // Установка I2C Slave адреса
    SERCOM3->I2CS.ADDR.reg = (16 << 1) | SERCOM_I2CS_ADDR_ADDRMASK(0x7F);
}

void i2c_to_uart(void) {
    while (1) {
        // Проверка наличия данных от I2C Master
        if (SERCOM3->I2CS.INTFLAG.bit.DRDY) {
            uint8_t data = SERCOM3->I2CS.DATA.reg;

            // Ожидание готовности UART передатчика
            while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
            SERCOM5->USART.DATA.reg = data;
        }
    }
}

int main(void) {
    SystemInit();

    // Инициализация UART и I2C
    init_uart();
    init_i2c_slave();

    // Основной цикл передачи данных с I2C на UART
    i2c_to_uart();

    while (1) {
        // Запасной цикл
    }
}
