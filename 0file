#include "SEGGER_RTT.h"
#include "i2c.h"
#include "sam.h"

// Определяем пины для I2C
#define I2C_SDA_PIN PINMUX_PA22D_SERCOM5_PAD0
#define I2C_SCL_PIN PINMUX_PA23D_SERCOM5_PAD1

// Буфер для хранения полученных данных
#define MAX_RECEIVED_DATA_LEN 32
uint8_t received_data[MAX_RECEIVED_DATA_LEN];
uint8_t received_data_len = 0;

// Создаем объект I2C
I2C i2c(SERCOM5, I2C_SDA_PIN, I2C_SCL_PIN, true);

// Обработчик данных, полученных от мастера
void onReceive(int len) {
    if (len > MAX_RECEIVED_DATA_LEN) {
        len = MAX_RECEIVED_DATA_LEN;  // Ограничиваем длину данных размером буфера
    }

    // Сохраняем данные в буфер
    for (int i = 0; i < len; i++) {
        received_data[i] = i2c.rx_buf[i];
    }
    received_data_len = len;

    // Выводим полученные данные через SEGGER RTT
    SEGGER_RTT_printf(0, "Received data: ");
    for (int i = 0; i < received_data_len; i++) {
        SEGGER_RTT_printf(0, "%02X ", received_data[i]);  // Вывод в HEX формате
    }
    SEGGER_RTT_printf(0, "\n");
}

// Обработчик прерываний для SERCOM5
void SERCOM5_Handler() {
    i2c.onService();  // Обработчик прерываний для I2C
}

int main() {
    SystemInit();
    SEGGER_RTT_printf(0, "System initialized.\n");

    // Инициализация I2C в режиме slave с адресом 0x09
    i2c.setSlave(0x09);
    SEGGER_RTT_printf(0, "I2C slave set to address 0x09.\n");

    // Устанавливаем обработчик данных
    i2c.onReceive(onReceive);
    SEGGER_RTT_printf(0, "I2C receive handler set.\n");

    while (1) {
        // Основной цикл
        // Ничего не делаем, всё обрабатывается в прерываниях
    }

    return 0;
}
