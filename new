#include <sam.h>

#define SYSTEM_CORE_CLOCK 1000000 // 1 MHz

void init_uart(void) {
    // Enable GCLK for SERCOM5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.bit.SYNCBUSY);

    // Configure SERCOM5 pins for UART (PA20 TX, PA21 RX)
    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE_C | PORT_PMUX_PMUXO_C;

    // Reset SERCOM5
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    while (SERCOM5->USART.CTRLA.bit.SWRST);

    // Configure SERCOM5 as UART
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD |
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               (3 << SERCOM_USART_CTRLA_RXPO_Pos) |
                               (1 << SERCOM_USART_CTRLA_TXPO_Pos);

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN |
                               SERCOM_USART_CTRLB_TXEN;

    // Baud rate (19200 baud, 1 MHz clock)
    SERCOM5->USART.BAUD.reg = (uint16_t)(65536 * (1 - ((16.0 * 19200) / SYSTEM_CORE_CLOCK)));

    // Enable SERCOM5
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
}

void uart_write(uint8_t data) {
    while (!(SERCOM5->USART.INTFLAG.bit.DRE));
    SERCOM5->USART.DATA.reg = data;
}

void uart_echo_handler(void) {
    if (SERCOM5->USART.INTFLAG.bit.RXC) {
        uint8_t received_data = SERCOM5->USART.DATA.reg;
        uart_write(received_data);
    }
}

int main(void) {
    SystemInit();
    init_uart();

    while (1) {
        uart_echo_handler();
    }
}
