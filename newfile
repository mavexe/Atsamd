#include <asf.h>

// Настройка UART (SERCOM5, PA20 - TX, PA21 - RX)
void configure_uart(void) {
    // Включение тактирования для SERCOM5
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;

    // Настройка генератора тактов для SERCOM5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM5_CORE | 
                        GCLK_CLKCTRL_GEN_GCLK0 | 
                        GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

    // Настройка мультиплексирования пинов PA20 и PA21 для SERCOM5
    PORT->Group[0].PMUX[20 / 2].reg |= PORT_PMUX_PMUXE_D | PORT_PMUX_PMUXO_D; // PA20 = TX, PA21 = RX
    PORT->Group[0].PINCFG[20].reg |= PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg |= PORT_PINCFG_PMUXEN;

    // Отключение SERCOM перед настройкой
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    while (SERCOM5->USART.CTRLA.reg & SERCOM_USART_CTRLA_SWRST);

    // Настройка режима UART: асинхронный, 8-N-1
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | // Режим UART с внутренними часами
                                (3 << SERCOM_USART_CTRLA_RXPO_Pos) |   // RX на PAD[3] (PA21)
                                (1 << SERCOM_USART_CTRLA_TXPO_Pos) |   // TX на PAD[2] (PA20)
                                SERCOM_USART_CTRLA_DORD;               // LSB-first

    // Настройка скорости передачи данных (BAUD)
    uint64_t baud = (uint64_t)65536 * (1000000 / (16 * 19200));
    SERCOM5->USART.BAUD.reg = (uint16_t)baud;

    // Включение приемника и передатчика
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN;
    while (SERCOM5->USART.CTRLB.reg & SERCOM_USART_CTRLB_RXEN);

    // Включение SERCOM
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    while (SERCOM5->USART.CTRLA.reg & SERCOM_USART_CTRLA_ENABLE);
}

// Функция для передачи одного байта данных
void uart_write_byte(uint8_t data) {
    while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)); // Ожидание освобождения буфера
    SERCOM5->USART.DATA.reg = data;
}

// Функция для чтения одного байта данных
uint8_t uart_read_byte(void) {
    while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)); // Ожидание приема данных
    return SERCOM5->USART.DATA.reg;
}

// Главная функция
int main(void) {
    system_init();
    configure_uart();

    while (1) {
        uint8_t received = uart_read_byte(); // Чтение байта
        uart_write_byte(received);          // Эхо-ответ
    }
}
