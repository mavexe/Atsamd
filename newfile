void SystemInit(void) {
    // Настройка генерации тактовой частоты на 1 МГц
    SYSCTRL->OSC8M.bit.PRESC = 0; // Делитель на 1, частота = 8 МГц
    SYSCTRL->OSC8M.bit.ONDEMAND = 0; // Постоянное включение осциллятора
    SYSCTRL->OSC8M.bit.RUNSTDBY = 1; // Работает в режиме ожидания
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) | GCLK_GENDIV_DIV(8); // Делитель GCLK0 = 8
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.bit.SYNCBUSY); // Ожидание завершения синхронизации

    // Подключение GCLK к SERCOM
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.bit.SYNCBUSY); // Ожидание завершения синхронизации
}

void UART_Init(void) {
    // Настройка пинов PA20 и PA21 для работы UART
    PORT->Group[0].PINCFG[20].bit.PMUXEN = 1;
    PORT->Group[0].PINCFG[21].bit.PMUXEN = 1;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE_D | PORT_PMUX_PMUXO_D; // SERCOM3

    // Отключение модуля перед конфигурацией
    SERCOM3->USART.CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    while (SERCOM3->USART.CTRLA.bit.SWRST);

    // Конфигурация режима UART
    SERCOM3->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD | // LSB First
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK | // Внутренний генератор
                               SERCOM_USART_CTRLA_RXPO(3) | // RX на PAD[3] (PA21)
                               SERCOM_USART_CTRLA_TXPO(1); // TX на PAD[2] (PA20)

    SERCOM3->USART.CTRLB.reg = SERCOM_USART_CTRLB_TXEN | // Включение TX
                               SERCOM_USART_CTRLB_RXEN; // Включение RX

    while (SERCOM3->USART.SYNCBUSY.bit.CTRLB); // Ожидание синхронизации

    // Установка скорости UART: BAUD = 65536 * (1 - 16 * BAUD_RATE / F_REF)
    uint64_t baud = (uint64_t)65536 * (1 - (16.0 * 9600 / 1000000));
    SERCOM3->USART.BAUD.reg = (uint16_t)baud;

    // Включение модуля
    SERCOM3->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    while (SERCOM3->USART.SYNCBUSY.bit.ENABLE); // Ожидание синхронизации
}

void UART_Write(uint8_t data) {
    while (!(SERCOM3->USART.INTFLAG.bit.DRE)); // Ожидание освобождения регистра
    SERCOM3->USART.DATA.reg = data;
}

uint8_t UART_Read(void) {
    while (!(SERCOM3->USART.INTFLAG.bit.RXC)); // Ожидание приема данных
    return SERCOM3->USART.DATA.reg;
}

int main(void) {
    SystemInit();
    UART_Init();

    while (1) {
        uint8_t received = UART_Read(); // Чтение данных
        UART_Write(received);          // Передача тех же данных (эхо)
    }
}
