void init_uart(void) {
    // Включение тактирования для модуля SERCOM5
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;

    // Настройка генератора для SERCOM5 на 1 MHz
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0); // Генератор 0

    // Настройка пинов PA20 и PA21 для работы с UART (SERCOM5)
    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN; // Включение мультиплексирования для PA20
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN; // Включение мультиплексирования для PA21

    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2); // SERCOM5: PA20 (PAD[2]), PA21 (PAD[3])

    // Конфигурация SERCOM5 для UART
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK | // Внутренний источник тактирования
                               SERCOM_USART_CTRLA_DORD |              // Младший бит вперед
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) | // RX на PAD[3] (PA21)
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);  // TX на PAD[2] (PA20)

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | // Включение приемника
                               SERCOM_USART_CTRLB_TXEN; // Включение передатчика

    while (SERCOM5->USART.SYNCBUSY.reg); // Ожидание завершения синхронизации

    // Установка скорости передачи данных (19200 бод при 1 MHz)
    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 19200)) - 1; // Формула: BAUD = (f_ref / (16 * f_baud)) - 1

    // Включение UART
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;

    while (SERCOM5->USART.SYNCBUSY.reg); // Ожидание завершения синхронизации
}

void init_i2c_slave(void) {
    // Включение тактирования для модуля SERCOM3
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;

    // Настройка генератора для SERCOM3 на 1 MHz
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM3_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0); // Генератор 0

    // Настройка пинов PA16 и PA17 для работы с I2C (SERCOM3)
    PORT->Group[0].PINCFG[16].reg = PORT_PINCFG_PMUXEN; // Включение мультиплексирования для PA16
    PORT->Group[0].PINCFG[17].reg = PORT_PINCFG_PMUXEN; // Включение мультиплексирования для PA17

    PORT->Group[0].PMUX[8].reg = PORT_PMUX_PMUXE(3) | PORT_PMUX_PMUXO(3); // SERCOM3: PA16 (SDA), PA17 (SCL)

    // Конфигурация SERCOM3 для I2C Slave
    SERCOM3->I2CS.CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE | // Режим I2C Slave
                               SERCOM_I2CS_CTRLA_SDAHOLD(0x2);  // Задержка удержания SDA

    SERCOM3->I2CS.ADDR.reg = SERCOM_I2CS_ADDR_ADDR(0x10); // Установка адреса Slave 0x10

    SERCOM3->I2CS.CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN; // Умный режим

    while (SERCOM3->I2CS.SYNCBUSY.reg); // Ожидание завершения синхронизации

    // Включение модуля I2C
    SERCOM3->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;

    while (SERCOM3->I2CS.SYNCBUSY.reg); // Ожидание завершения синхронизации
}

void i2c_to_uart(void) {
    while (1) {
        // Ожидание данных от мастера
        while (!(SERCOM3->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY));
        uint8_t data = SERCOM3->I2CS.DATA.reg; // Чтение данных

        // Передача данных на UART
        while (!(SERCOM5->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
        SERCOM5->USART.DATA.reg = data; // Отправка данных
    }
}

int main(void) {
    SystemInit(); // Инициализация системы
    init_uart();  // Инициализация UART
    init_i2c_slave(); // Инициализация I2C Slave

    i2c_to_uart(); // Передача данных из I2C в UART

    while (1) {
        // Основной цикл (сюда программа не должна попасть)
    }
}
