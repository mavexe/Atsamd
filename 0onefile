#include "i2c.h"
#include "Uart.h"

#define I2C_SLAVE_ADDRESS 0x09
 
uint8_t rxBuffer[BUFFER_SIZE];  // Буфер для хранения данных, полученных по I2C
uint8_t bufferIndex = 0;        // Индекс для заполнения буфера

// Инициализация I2C Slave на SERCOM5
I2C i2cSlave(SERCOM5, PIN_PA22, PIN_PA23, true);

// Инициализация UART на SERCOM5
Uart uart(SERCOM5, PIN_PA20, PIN_PA21, SERCOM_RX_PAD_0, UART_TX_PAD_2);

void setup() {

  i2cSlave.setSlave(I2C_SLAVE_ADDRESS);

  // Настройка прерываний для I2C
  i2cSlave.onReceive(onI2CReceive);
}

void loop() {
  // Основной цикл, в котором можно выполнять другие задачи
}

// Обработчик прерывания при получении данных по I2C
void onI2CReceive(int bytesReceived) {
  for (int i = 0; i < bytesReceived; i++) {
    if (bufferIndex < BUFFER_SIZE) {
      rxBuffer[bufferIndex++] = i2cSlave.rx_buf[i];  // Сохраняем данные в буфер
    }
  }

  // Если буфер заполнен или передача завершена, переключаемся на UART
  if (bufferIndex >= BUFFER_SIZE || i2cSlave.sercom->I2CS.INTFLAG.bit.PREC) {
    switchToUART();
  }
}


void switchToUART() {
  // Отключаем I2C
  i2cSlave.sercom->I2CS.CTRLA.bit.ENABLE = 0;  // Отключаем I2C Slave
  while (i2cSlave.sercom->I2CS.STATUS.bit.SYNCBUSY);  // Ждем завершения отключения

  // Инициализация UART
  uart.begin(9600);  // Настраиваем UART на скорость 9600 бод

  // Отправка данных из буфера по UART
  for (int i = 0; i < bufferIndex; i++) {
    uart.write(rxBuffer[i]);
  }

  // Сброс индекса буфера
  bufferIndex = 0;

  // Переключаем SERCOM5 обратно в режим I2C Slave
  i2cSlave.setSlave(I2C_SLAVE_ADDRESS);
}
