#include "SEGGER_RTT.h"
#include "i2c.h"
#include "sam.h"

#define BUF_SIZE 64

// Глобальный буфер для хранения данных из I2C
uint8_t global_buffer[BUF_SIZE];
volatile uint8_t buffer_length = 0;

I2C i2c_A(SERCOM5, PINMUX_PA22D_SERCOM5_PAD0, PINMUX_PA23D_SERCOM5_PAD1, true);

void init_uart(void) {
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM5_GCLK_ID_CORE) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0);

    PORT->Group[0].PINCFG[20].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PINCFG[21].reg = PORT_PINCFG_PMUXEN;
    PORT->Group[0].PMUX[10].reg = PORT_PMUX_PMUXE(2) | PORT_PMUX_PMUXO(2);

    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_DORD |
                               (0x3 << SERCOM_USART_CTRLA_RXPO_Pos) |
                               (0x1 << SERCOM_USART_CTRLA_TXPO_Pos);

    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN |
                               SERCOM_USART_CTRLB_TXEN;

    SERCOM5->USART.BAUD.reg = (1000000 / (16 * 9600)) - 1;
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
}

void deinit_uart(void) {
    SERCOM5->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
}

void send_uart_data(void) {
    for (int i = 0; i < buffer_length; i++) {
        while (!(SERCOM5->USART.INTFLAG.bit.DRE)) {}
        SERCOM5->USART.DATA.reg = global_buffer[i];
    }
    buffer_length = 0; // Очистка буфера
}

void receiveEvent(int len) {
    buffer_length = len;
    for (int i = 0; i < len; i++) {
        global_buffer[i] = i2c_A.rx_buf[i];
    }
    
    // Переключаемся на UART и отправляем данные
    deinit_i2c_slave();
    init_uart();
    send_uart_data();
    deinit_uart();
    init_i2c_slave();
}

void init_i2c_slave(void) {
    i2c_A.setSlave(9);
    i2c_A.onReceive(receiveEvent);
}

void deinit_i2c_slave(void) {
    SERCOM5->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
}

void SERCOM5_Handler(void) {
    i2c_A.onService();
}

int main(void) {
    SystemInit();
    SEGGER_RTT_printf(0, "System Initialized\n");

    init_i2c_slave();

    while (1) {
        // Главный цикл
    }
}
