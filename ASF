#define I2C_SLAVE_ADDR  0x12  // Адрес I2C Slave
#define BUFFER_SIZE     64    // Размер буфера

volatile uint8_t i2c_buffer[BUFFER_SIZE];
volatile uint8_t buffer_index = 0;

void SERCOM5_Handler(void) {
    if (I2C_Slave_ReceivedStartCondition(SERCOM5)) {
        buffer_index = 0;
    }
    
    if (I2C_Slave_DataReady(SERCOM5)) {
        if (buffer_index < BUFFER_SIZE) {
            i2c_buffer[buffer_index++] = I2C_Slave_ReadByte(SERCOM5);
        }
    }
    
    if (I2C_Slave_ReceivedStopCondition(SERCOM5)) {
        switch_sercom5_to_uart();
    }
}

void switch_sercom5_to_uart() {
    I2C_Disable(SERCOM5);
    
    UART_Init(SERCOM5, 9600, UART_TX_PA20_RX_PA21);
    
    for (uint8_t i = 0; i < buffer_index; i++) {
        UART_Write(SERCOM5, i2c_buffer[i]);
    }
    
    switch_sercom5_to_i2c();
}

void switch_sercom5_to_i2c() {
    UART_Disable(SERCOM5);
    
    I2C_Slave_Init(SERCOM5, I2C_SLAVE_ADDR, I2C_SDA_PA22_SCL_PA23);
}

int main(void) {
    SystemInit();
    switch_sercom5_to_i2c();
    NVIC_EnableIRQ(SERCOM5_IRQn);
    while (1) {}
}
