#include "SEGGER_RTT.h"
#include "i2c.h"
#include "Uart.h"
#include "sam.h"

// Определяем пины для I2C
#define I2C_SDA_PIN PINMUX_PA22D_SERCOM5_PAD0
#define I2C_SCL_PIN PINMUX_PA23D_SERCOM5_PAD1

// Определяем пины для UART
#define UART_RX_PIN PINMUX_PA20D_SERCOM5_PAD2  // RX на PA20 (PAD2)
#define UART_TX_PIN PINMUX_PA21D_SERCOM5_PAD3  // TX на PA21 (PAD3)

// Буфер для хранения полученных данных
#define MAX_RECEIVED_DATA_LEN 32
uint8_t received_data[MAX_RECEIVED_DATA_LEN];
uint8_t received_data_len = 0;

I2C i2c(SERCOM5, I2C_SDA_PIN, I2C_SCL_PIN, true);
Uart uart(SERCOM5, UART_RX_PIN, UART_TX_PIN, SERCOM_RX_PAD_2, UART_TX_PAD_0);

// Обработчик данных, полученных от мастера
void onReceive(int len) {
    if (len > MAX_RECEIVED_DATA_LEN) {
        len = MAX_RECEIVED_DATA_LEN;  // Ограничиваем длину данных размером буфера
    }

    // Сохраняем данные в буфер
    for (int i = 0; i < len; i++) {
        received_data[i] = i2c.rx_buf[i];
    }
    received_data_len = len;

    // Отключаем I2C slave
    i2c.reset();  // Сбрасываем модуль I2C

    // Сбрасываем SERCOM и перенастраиваем его для UART
    SERCOM5->USART.CTRLA.bit.ENABLE = 0;  // Отключаем UART
    while (SERCOM5->USART.SYNCBUSY.bit.ENABLE);  // Ждем завершения отключения

    SERCOM5->USART.CTRLA.bit.SWRST = 1;  // Сбрасываем SERCOM
    while (SERCOM5->USART.CTRLA.bit.SWRST);  // Ждем завершения сброса

    // Инициализируем UART
    uart.begin(9600);  // Настраиваем UART на скорость 9600 бод

    SEGGER_RTT_printf(0, "Received %d bytes. I2C slave disabled, UART enabled.\n", len);
}

// Обработчик прерываний I2C
void SERCOM5_Handler() {
    i2c.onService();
}

// Функция для передачи данных через UART
void send_data_via_uart() {
    if (received_data_len > 0) {
        SEGGER_RTT_printf(0, "Sending data via UART: ");
        for (int i = 0; i < received_data_len; i++) {
            uart.write(received_data[i]);  // Отправка данных через UART
            SEGGER_RTT_printf(0, "%02X ", received_data[i]);  // Логирование данных
        }
        SEGGER_RTT_printf(0, "\n");

        // Очищаем буфер после отправки
        received_data_len = 0;
    }
}

void delay() {
    for (int i = 0; i < 100000; i++) {}
}

int main() {
    SystemInit();
    i2c.setSlave(0x09);  // Устанавливаем адрес slave
    i2c.onReceive(onReceive);  // Устанавливаем обработчик данных

    while (1) {
        // Если данные были получены, отправляем их через UART
        if (received_data_len > 0) {
            send_data_via_uart();
        }

        delay();
    }

    return 0;
}
