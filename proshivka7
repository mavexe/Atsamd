#include "sam.h"

// Функция для настройки SERCOM как UART
void configure_sercom_as_uart(Sercom *sercom, uint32_t baud_rate, uint8_t rx_pin, uint8_t tx_pin) {
    // Включение питания для SERCOM
    PM->APBCMASK.reg |= (1 << (((uint32_t)sercom - (uint32_t)SERCOM0) / 0x400));
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID((((uint32_t)sercom - (uint32_t)SERCOM0) / 0x400)) |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_CLKEN;
    while (GCLK->STATUS.bit.SYNCBUSY);

    // Настройка пинов RX/TX
    PORT->Group[rx_pin / 32].PINCFG[rx_pin % 32].reg |= PORT_PINCFG_PMUXEN;
    PORT->Group[tx_pin / 32].PINCFG[tx_pin % 32].reg |= PORT_PINCFG_PMUXEN;
    PORT->Group[rx_pin / 32].PMUX[rx_pin % 32 / 2].reg = PORT_PMUX_PMUXE(3) | PORT_PMUX_PMUXO(3);

    // Настройка SERCOM как UART
    sercom->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(1) | // RX на PAD[1]
                               (0x0 << SERCOM_USART_CTRLA_TXPO_Pos); // TX на PAD[0]
    sercom->USART.BAUD.reg = (uint16_t)((float)48000000 / (16 * baud_rate));
    sercom->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    while (!(sercom->USART.INTFLAG.bit.DRE)); // Ожидание готовности
}

// Функция передачи данных через UART
void transmit_data_over_uart(Sercom *sercom, uint8_t data) {
    while (!(sercom->USART.INTFLAG.bit.DRE)); // Ожидание готовности
    sercom->USART.DATA.reg = data;
}

int main(void) {
    SystemInit();

    // Настройка всех UART
    configure_sercom_as_uart(SERCOM0, 19200, 2, 3); // PA02, PA03
    configure_sercom_as_uart(SERCOM1, 19200, 4, 5); // PA04, PA05
    configure_sercom_as_uart(SERCOM2, 19200, 6, 7); // PA06, PA07
    configure_sercom_as_uart(SERCOM3, 19200, 8, 9); // PA08, PA09
    configure_sercom_as_uart(SERCOM4, 19200, 10, 11); // PA10, PA11

    uint8_t test_message[] = "Hello, UART!\n";
    uint8_t i;

    while (1) {
        // Передача тестового сообщения на все UART
        for (i = 0; i < sizeof(test_message) - 1; i++) {
            transmit_data_over_uart(SERCOM0, test_message[i]);
            transmit_data_over_uart(SERCOM1, test_message[i]);
            transmit_data_over_uart(SERCOM2, test_message[i]);
            transmit_data_over_uart(SERCOM3, test_message[i]);
            transmit_data_over_uart(SERCOM4, test_message[i]);
        }

        // Небольшая задержка
        for (volatile uint32_t delay = 0; delay < 100000; delay++);
    }
}
